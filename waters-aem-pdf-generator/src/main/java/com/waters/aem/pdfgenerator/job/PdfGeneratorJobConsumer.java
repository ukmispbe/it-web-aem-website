package com.waters.aem.pdfgenerator.job;

import com.google.common.base.Stopwatch;
import com.icfolson.aem.library.api.page.PageDecorator;
import com.icfolson.aem.library.api.page.PageManagerDecorator;
import com.waters.aem.pdfgenerator.services.PdfGenerator;
import org.apache.sling.api.SlingConstants;
import org.apache.sling.api.resource.LoginException;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.apache.sling.event.jobs.Job;
import org.apache.sling.event.jobs.consumer.JobConsumer;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

/**
 * The PDF Generator Job Consumer is responsible for consuming jobs generated by the PDF Generator Replication Event
 * Handler.
 */
@Component(immediate = true,
    service = JobConsumer.class,
    property = {
        JobConsumer.PROPERTY_TOPICS + "=" + PdfGeneratorJobConsumer.JOB_TOPIC_GENERATE
    })
public final class PdfGeneratorJobConsumer implements JobConsumer {

    public static final String JOB_TOPIC_GENERATE = "com/waters/events/pdfgenerator/generate";

    private static final Logger LOG = LoggerFactory.getLogger(PdfGeneratorJobConsumer.class);

    @Reference
    private ResourceResolverFactory resourceResolverFactory;

    @Reference
    private PdfGenerator pdfGenerator;

    @Override
    public JobResult process(final Job job) {
        final Stopwatch stopwatch = Stopwatch.createStarted();

        final String path = job.getProperty(SlingConstants.PROPERTY_PATH, String.class);

        LOG.info("processing PDF generator job for path : {}", path);

        try (final ResourceResolver resourceResolver = resourceResolverFactory.getServiceResourceResolver(null)) {
            final PageDecorator page = resourceResolver.adaptTo(PageManagerDecorator.class).getPage(path);

            pdfGenerator.generatePdfDocumentFromHtml(page, true, true);
        } catch (LoginException | IOException e) {
            LOG.error("error generating PDF for path : " + path, e);

            // re-throw exception to cancel the job
            throw new RuntimeException(e);
        }

        final long duration = stopwatch.elapsed(TimeUnit.SECONDS);

        LOG.info("finished processing PDF generator job in {}s", duration);

        return JobResult.OK;
    }
}
